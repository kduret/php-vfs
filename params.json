{"name":"PHP Virtual filesystem","tagline":"php-vfs - unit testing filesystem methods made easy!","body":"|Build status|Coverage|Last stable|Last development|\r\n|:-------------:|:-------------:|:-----:|:-----:|\r\n|[![Build Status](https://travis-ci.org/thornag/php-vfs.png)](https://travis-ci.org/thornag/php-vfs)|[![Coverage Status](https://coveralls.io/repos/thornag/php-vfs/badge.png?branch=master)](https://coveralls.io/r/thornag/php-vfs?branch=master)|[![Latest Stable Version](https://poser.pugx.org/php-vfs/php-vfs/v/stable.png)](https://packagist.org/packages/php-vfs/php-vfs)|[![Latest Unstable Version](https://poser.pugx.org/php-vfs/php-vfs/v/unstable.png)](https://packagist.org/packages/php-vfs/php-vfs)|\r\n\r\nphp-vfs\r\n========\r\n\r\nVery simple filesystem emulating PHP stream wrapper for use in unit testing\r\nwith PHPUnit, PHPSpec or any other testing framework. It offers means to test methods interacting\r\nwith real filesystem without creating temporary directories or file fixtures.\r\n\r\nReleased under a GPL3+ licence.\r\n\r\nFor latest release please use tag indicated above.\r\n\r\nPrerequisites\r\n-------------\r\n\r\nPHP >= 5.4.0\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n**Composer**\r\n\r\nAdd a dev dependency on php-vfs/php-vfs to your project's composer.json\r\n\r\n    {\r\n        \"require-dev\": {\r\n            \"php-vfs/php-vfs\": \"*@stable\"\r\n        }\r\n    }\r\n\r\nOr via command line:\r\n\r\n    composer require --dev php-vfs/php-vfs=*@stable\r\n\r\nThis will install latest stable version of php-vfs as a development dependency, for the latest development version replace @stable with @dev.\r\n\r\nUsage\r\n--------------\r\n\r\nLet's assume we need to test a class that reads CSV file and provides SUM() of columns. The unit test class would normally look something similar to following:\r\n\r\n```PHP\r\nclass CSVTest extends \\PHPUnit_Framework_TestCase {\r\n\r\n    public function test_sumIsCorrectlyCalculated()\r\n    {\r\n        $csv = new CSV('fixtures/sum.csv');\r\n\r\n        $this->assertEquals(10, $csv->getColumnSum(1), 'Sum of first column is 10');\r\n        $this->assertEquals(15, $csv->getCOlumnSum(2), 'Sum of first column is 15');\r\n    }\r\n}\r\n```\r\n\r\nAnd the CSV file would look something like:\r\n\r\n```\r\n\"Column 1\",\"Column 2\"\r\n5,5\r\n4,7\r\n1,3\r\n```\r\n\r\nAnd our CSV class:\r\n\r\n```PHP\r\nclass CSV {\r\n\r\n    protected $data = array();\r\n\r\n    public function __construct($file)\r\n    {\r\n        if(false === ($handle = fopen($file, \"r\"))) {\r\n            throw new \\RuntimeException('Could not read input file: ' . $file);\r\n        }\r\n\r\n        while(false !== ($data = fgetcsv($handle, 1024))) {\r\n            $this->data[] = $data;\r\n        }\r\n\r\n        fclose($handle);\r\n    }\r\n\r\n    public function getColumnSum($column)\r\n    {\r\n        $toSum = array();\r\n        foreach ($this->data as $line) {\r\n            $toSum[] = $line[$column];\r\n        }\r\n\r\n        return array_sum($toSum);\r\n    }\r\n\r\n}\r\n```\r\n\r\nWhile above works, providing fixture file to be able to test is somewhat not in line with unit testing principles; it creates dependency on filesystem.\r\nWe could possibly create the file in our setUp method and then clear it in tearDown, but if the test fails and tearDown is never executed we will leave\r\n garbage behind, and we didn't even consider a situation when we don't have permissions to the file system and so on. The other option is to create fixture and keep\r\n it together with source files. While this approach is widely used it does mean that if someone changes that fixture your test will fail.\r\n\r\n The solution is to create our file in memory - this is when php-vfs comes into play.\r\n\r\n Let's consider slightly reworked unit test:\r\n\r\n```PHP\r\nuse VirtualFileSystem\\FileSystem;\r\n\r\nclass CSVTest extends \\PHPUnit_Framework_TestCase {\r\n\r\n    protected $csvData = array(\r\n        '\"Column 1\";\"Column 2\"',\r\n        '5,5',\r\n        '4,7',\r\n        '1,3'\r\n    );\r\n\r\n    public function test_sumIsCorrectlyCalculated()\r\n    {\r\n\r\n        $fs = new FileSystem();\r\n\r\n        file_put_contents($fs->path('/sum.csv'), join(PHP_EOL, $this->csvData));\r\n\r\n        $csv = new CSV($fs->path('/sum.csv'));\r\n\r\n        $this->assertEquals(10, $csv->getColumnSum(1), 'Sum of first column is 10');\r\n        $this->assertEquals(15, $csv->getCOlumnSum(2), 'Sum of first column is 15');\r\n    }\r\n}\r\n```\r\n\r\nAs you can see there is no fixture or file created by our test that could be otherwise left behind. We can control the file contents and existence within the\r\nscope of our unit test, thus keeping our test background/environment isolated from external changes.\r\n\r\nUsage\r\n--------------\r\n\r\nWhile using low level API for interaction with php-vfs is at its core, a much easier approach is to mock filesystem using provided interface.\r\n\r\nThere are generally 2 methods you should always use when mocking up the state:\r\n\r\n- ```\\VirtualFileSystem\\FileSystem::createDirectory($path, $recursive, $mode)``` used to mock directory;\r\n- ```\\VirtualFileSystem\\FileSystem::createFIle($path, $data)``` used to mock file and its contents.\r\n\r\nCombining above 2 should allow you to recreate any direcotry/file structure.\r\n\r\nBehaviour\r\n-------------\r\n\r\nphp-vfs tries to mimick unix filesystem as much as possible. The same conditions must be matched and the same errors will be triggered as if we were interacting via php with real underlying filesystem.\r\n\r\nMost of [PHP filesystem functions](http://www.php.net/manual/en/ref.filesystem.php) are happily supported by php-vfs as long as the full file URL is passed as argument (using ```$fs->path()```). If you find something not working and not listed below please rise an issue on [github issues page](https://github.com/thornag/php-vfs/issues)\r\n\r\n**Supported**\r\n\r\nfopen modes\r\nsetting permissions and ownership\r\ndirectory iteration\r\nfile access/modification/change times\r\n\r\n**Currently unsupported**\r\n\r\npermission/ownership checks\r\n\r\n**Known pitfalls**\r\n\r\nstreamWrapper implementations like php-vfs will not work with glob methods for directory iteration - you need to use DirectoryIterator or readdir instead.\r\n\r\nContributing\r\n----------------\r\n\r\nAny contributions are more than welcome. Please make sure that you keep to PSR-2 standards and provide tested code.\r\n\r\nYou are more than welcome to add yourself to CONTRIBUTORS.md.\r\n","google":"UA-45416100-1","note":"Don't delete this file! It's used internally to help with page regeneration."}